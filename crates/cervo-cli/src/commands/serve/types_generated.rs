// automatically generated by the FlatBuffers compiler, do not modify


// @generated
#![allow(unused)]

use core::mem;
use core::cmp::Ordering;


use flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod cervo {

  use core::mem;
  use core::cmp::Ordering;

  
  use flatbuffers::{EndianScalar, Follow};

pub enum NamedFloatListOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NamedFloatList<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NamedFloatList<'a> {
  type Inner = NamedFloatList<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NamedFloatList<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_SHAPE: flatbuffers::VOffsetT = 6;
  pub const VT_VALUES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NamedFloatList { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NamedFloatListArgs<'args>
  ) -> flatbuffers::WIPOffset<NamedFloatList<'bldr>> {
    let mut builder = NamedFloatListBuilder::new(_fbb);
    if let Some(x) = args.values { builder.add_values(x); }
    if let Some(x) = args.shape { builder.add_shape(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NamedFloatList::VT_NAME, None)}
  }
  #[inline]
  pub fn shape(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(NamedFloatList::VT_SHAPE, None)}
  }
  #[inline]
  pub fn values(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(NamedFloatList::VT_VALUES, None)}
  }
}

impl flatbuffers::Verifiable for NamedFloatList<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>("shape", Self::VT_SHAPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("values", Self::VT_VALUES, false)?
     .finish();
    Ok(())
  }
}
pub struct NamedFloatListArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub shape: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
    pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}
impl<'a> Default for NamedFloatListArgs<'a> {
  #[inline]
  fn default() -> Self {
    NamedFloatListArgs {
      name: None,
      shape: None,
      values: None,
    }
  }
}

pub struct NamedFloatListBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NamedFloatListBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NamedFloatList::VT_NAME, name);
  }
  #[inline]
  pub fn add_shape(&mut self, shape: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NamedFloatList::VT_SHAPE, shape);
  }
  #[inline]
  pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NamedFloatList::VT_VALUES, values);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NamedFloatListBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NamedFloatListBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NamedFloatList<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NamedFloatList<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NamedFloatList");
      ds.field("name", &self.name());
      ds.field("shape", &self.shape());
      ds.field("values", &self.values());
      ds.finish()
  }
}
pub enum DataInstanceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DataInstance<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataInstance<'a> {
  type Inner = DataInstance<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataInstance<'a> {
  pub const VT_IDENTITY: flatbuffers::VOffsetT = 4;
  pub const VT_DATA_LISTS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataInstance { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataInstanceArgs<'args>
  ) -> flatbuffers::WIPOffset<DataInstance<'bldr>> {
    let mut builder = DataInstanceBuilder::new(_fbb);
    builder.add_identity(args.identity);
    if let Some(x) = args.data_lists { builder.add_data_lists(x); }
    builder.finish()
  }


  #[inline]
  pub fn identity(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(DataInstance::VT_IDENTITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn data_lists(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NamedFloatList<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NamedFloatList>>>>(DataInstance::VT_DATA_LISTS, None)}
  }
}

impl flatbuffers::Verifiable for DataInstance<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("identity", Self::VT_IDENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<NamedFloatList>>>>("data_lists", Self::VT_DATA_LISTS, false)?
     .finish();
    Ok(())
  }
}
pub struct DataInstanceArgs<'a> {
    pub identity: u64,
    pub data_lists: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NamedFloatList<'a>>>>>,
}
impl<'a> Default for DataInstanceArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataInstanceArgs {
      identity: 0,
      data_lists: None,
    }
  }
}

pub struct DataInstanceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataInstanceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_identity(&mut self, identity: u64) {
    self.fbb_.push_slot::<u64>(DataInstance::VT_IDENTITY, identity, 0);
  }
  #[inline]
  pub fn add_data_lists(&mut self, data_lists: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<NamedFloatList<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataInstance::VT_DATA_LISTS, data_lists);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataInstanceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataInstanceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataInstance<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataInstance<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataInstance");
      ds.field("identity", &self.identity());
      ds.field("data_lists", &self.data_lists());
      ds.finish()
  }
}
}  // pub mod cervo

pub use cervo::*;
