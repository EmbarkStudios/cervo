"""This is an automatically generated stub for `request.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator, Sequence

class NamedFloatList:
    name: str
    shape: Sequence[int]
    values: Sequence[float]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[NamedFloatListReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> NamedFloatListReader: ...
    @staticmethod
    def new_message() -> NamedFloatListBuilder: ...
    def to_dict(self) -> dict: ...

class NamedFloatListReader(NamedFloatList):
    def as_builder(self) -> NamedFloatListBuilder: ...

class NamedFloatListBuilder(NamedFloatList):
    @staticmethod
    def from_dict(dictionary: dict) -> NamedFloatListBuilder: ...
    def copy(self) -> NamedFloatListBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> NamedFloatListReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DataInstance:
    identity: int
    dataLists: Sequence[NamedFloatList | NamedFloatListBuilder | NamedFloatListReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DataInstanceReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DataInstanceReader: ...
    @staticmethod
    def new_message() -> DataInstanceBuilder: ...
    def to_dict(self) -> dict: ...

class DataInstanceReader(DataInstance):
    dataLists: Sequence[NamedFloatListReader]
    def as_builder(self) -> DataInstanceBuilder: ...

class DataInstanceBuilder(DataInstance):
    dataLists: Sequence[NamedFloatList | NamedFloatListBuilder | NamedFloatListReader]
    @staticmethod
    def from_dict(dictionary: dict) -> DataInstanceBuilder: ...
    def copy(self) -> DataInstanceBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DataInstanceReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Response:
    seq: int
    data: Sequence[DataInstance | DataInstanceBuilder | DataInstanceReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ResponseReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ResponseReader: ...
    @staticmethod
    def new_message() -> ResponseBuilder: ...
    def to_dict(self) -> dict: ...

class ResponseReader(Response):
    data: Sequence[DataInstanceReader]
    def as_builder(self) -> ResponseBuilder: ...

class ResponseBuilder(Response):
    data: Sequence[DataInstance | DataInstanceBuilder | DataInstanceReader]
    @staticmethod
    def from_dict(dictionary: dict) -> ResponseBuilder: ...
    def copy(self) -> ResponseBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ResponseReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Request:
    seq: int
    data: Sequence[DataInstance | DataInstanceBuilder | DataInstanceReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[RequestReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> RequestReader: ...
    @staticmethod
    def new_message() -> RequestBuilder: ...
    def to_dict(self) -> dict: ...

class RequestReader(Request):
    data: Sequence[DataInstanceReader]
    def as_builder(self) -> RequestBuilder: ...

class RequestBuilder(Request):
    data: Sequence[DataInstance | DataInstanceBuilder | DataInstanceReader]
    @staticmethod
    def from_dict(dictionary: dict) -> RequestBuilder: ...
    def copy(self) -> RequestBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> RequestReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
