# automatically generated by the FlatBuffers compiler, do not modify

# namespace: cervo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataInstance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataInstance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataInstance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataInstance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataInstance
    def Identity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DataInstance
    def DataLists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from cervo.NamedFloatList import NamedFloatList
            obj = NamedFloatList()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataInstance
    def DataListsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataInstance
    def DataListsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DataInstanceStart(builder):
    builder.StartObject(2)

def Start(builder):
    DataInstanceStart(builder)

def DataInstanceAddIdentity(builder, identity):
    builder.PrependUint64Slot(0, identity, 0)

def AddIdentity(builder, identity):
    DataInstanceAddIdentity(builder, identity)

def DataInstanceAddDataLists(builder, dataLists):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dataLists), 0)

def AddDataLists(builder, dataLists):
    DataInstanceAddDataLists(builder, dataLists)

def DataInstanceStartDataListsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataListsVector(builder, numElems):
    return DataInstanceStartDataListsVector(builder, numElems)

def DataInstanceEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataInstanceEnd(builder)
